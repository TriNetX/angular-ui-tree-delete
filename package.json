{
  "_args": [
    [
      "angular-ui-tree@git://github.com/TriNetX/angular-ui-tree.git#f9b3d07",
      "/Users/simon.bailey/src/frontend-ui"
    ]
  ],
  "_from": "git://github.com/TriNetX/angular-ui-tree.git#f9b3d07",
  "_id": "angular-ui-tree@2.13.0",
  "_inCache": true,
  "_installable": true,
  "_location": "/angular-ui-tree",
  "_phantomChildren": {},
  "_requested": {
    "hosted": {
      "directUrl": "https://raw.githubusercontent.com/TriNetX/angular-ui-tree/f9b3d07/package.json",
      "gitUrl": "git://github.com/TriNetX/angular-ui-tree.git#f9b3d07",
      "httpsUrl": "git+https://github.com/TriNetX/angular-ui-tree.git#f9b3d07",
      "shortcut": "github:TriNetX/angular-ui-tree#f9b3d07",
      "ssh": "git@github.com:TriNetX/angular-ui-tree.git#f9b3d07",
      "sshUrl": "git+ssh://git@github.com/TriNetX/angular-ui-tree.git#f9b3d07",
      "type": "github"
    },
    "name": "angular-ui-tree",
    "raw": "angular-ui-tree@git://github.com/TriNetX/angular-ui-tree.git#f9b3d07",
    "rawSpec": "git://github.com/TriNetX/angular-ui-tree.git#f9b3d07",
    "scope": null,
    "spec": "git://github.com/TriNetX/angular-ui-tree.git#f9b3d07",
    "type": "hosted"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "git://github.com/TriNetX/angular-ui-tree.git#f9b3d07aebef73a4b1efdf44da5ded88964a2c2b",
  "_shasum": "44bc360e88bfd4d1800c2a9e66c5def5d9be1bc9",
  "_shrinkwrap": null,
  "_spec": "angular-ui-tree@git://github.com/TriNetX/angular-ui-tree.git#f9b3d07",
  "_where": "/Users/simon.bailey/src/frontend-ui",
  "bugs": {
    "url": "https://github.com/angular-ui-tree/angular-ui-tree/issues"
  },
  "dependencies": {},
  "description": "An AngularJS UI component that can sort nested lists, provides drag & drop support and doesn't depend on jQuery",
  "devDependencies": {
    "codacy-coverage": "^1.1.3",
    "connect-livereload": "^0.5.2",
    "coveralls": "^2.11.4",
    "del": "^1.2.0",
    "gulp": "^3.9.0",
    "gulp-clean": "^0.3.1",
    "gulp-concat": "^2.4.3",
    "gulp-connect": "^2.2.0",
    "gulp-gh-pages": "^0.5.2",
    "gulp-jscs": "^1.4.0",
    "gulp-jshint": "^1.9.0",
    "gulp-load-plugins": "^0.8.0",
    "gulp-minify-css": "^1.1.0",
    "gulp-protractor": "^1.0.0",
    "gulp-rename": "^1.2.0",
    "gulp-symlink": "^2.1.0",
    "gulp-uglify": "^1.1.0",
    "jshint-stylish": "^1.0.0",
    "karma": "^0.12.24",
    "karma-coverage": "^0.5.3",
    "karma-firefox-launcher": "^0.1.3",
    "karma-jasmine": "~0.1.0",
    "karma-phantomjs-launcher": "^0.1.4",
    "load-grunt-tasks": "^0.6.0",
    "open": "0.0.5",
    "protractor": "^2.1.0",
    "require-dir": "^0.1.0"
  },
  "engines": {
    "node": ">=0.8.0"
  },
  "gitHead": "f9b3d07aebef73a4b1efdf44da5ded88964a2c2b",
  "homepage": "https://github.com/angular-ui-tree/angular-ui-tree#readme",
  "license": "MIT",
  "main": "index.js",
  "name": "angular-ui-tree",
  "optionalDependencies": {},
  "readme": "Angular UI Tree\n======================\n\n[![Build Status](https://travis-ci.org/angular-ui-tree/angular-ui-tree.svg?branch=master)](https://travis-ci.org/angular-ui-tree/angular-ui-tree) [![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/angular-ui-tree/angular-ui-tree?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge)\n\nAngular UI Tree is an AngularJS UI component that can sort nested lists, provides drag & drop support and doesn't depend on jQuery. If you are a user who uses `angular-nestedSortable`, this is [How to migrate From v1.x to v2.0](https://github.com/JimLiu/angular-ui-tree/wiki/Migrate-From-v1.x-to-v2.0).\n\n\n## Features\n\n- Uses the native AngularJS scope for data binding\n- Sorted and move items through the entire tree\n- Prevent elements from accepting child nodes\n\n## Supported browsers\n\nThe Angular UI Tree is tested with the following browsers:\n\n- Chrome (stable)\n- Firefox\n- IE 8, 9 and 10\n\nFor IE8 support, make sure you do the following:\n\n- include an [ES5 shim](https://github.com/es-shims/es5-shim)\n- make your [AngularJS application compatible with Internet Explorer](http://docs.angularjs.org/guide/ie)\n- use [jQuery 1.x](http://jquery.com/browser-support/)\n\n## Demo\nWatch the Tree component in action on the [demo page](http://angular-ui-tree.github.io/angular-ui-tree/).\n\n## Requirements\n\n- Angularjs\n\n## Usage\n\n### Download\n- Using [bower](http://bower.io/) to install it. `bower install angular-ui-tree`\n- [Download](https://github.com/angular-ui-tree/angular-ui-tree/archive/master.zip) from github.\n\n### Load CSS\nLoad the css file: `angular-ui-tree.min.css` in your application:\n```html\n<link rel=\"stylesheet\" href=\"bower_components/angular-ui-tree/dist/angular-ui-tree.min.css\">\n```\n\n\n### Load Script\nLoad the script file: `angular-ui-tree.js` or `angular-ui-tree.min.js` in your application:\n\n```html\n<script type=\"text/javascript\" src=\"bower_components/angular-ui-tree/dist/angular-ui-tree.js\"></script>\n```\n\n### Code\nAdd the sortable module as a dependency to your application module:\n\n```js\nvar myAppModule = angular.module('MyApp', ['ui.tree'])\n```\n\nInjecting `ui.tree`, `ui-tree-nodes`, `ui-tree-node`, `ui-tree-handle` to your html.\n\n#### HTML View or Templates\n```html\n<div ui-tree>\n  <ol ui-tree-nodes=\"\" ng-model=\"list\">\n    <li ng-repeat=\"item in list\" ui-tree-node>\n      <div ui-tree-handle>\n        {{item.title}}\n      </div>\n      <ol ui-tree-nodes=\"\" ng-model=\"item.items\">\n        <li ng-repeat=\"subItem in item.items\" ui-tree-node>\n          <div ui-tree-handle>\n            {{subItem.title}}\n          </div>\n        </li>\n      </ol>\n    </li>\n  </ol>\n</div>\n```\n**Developing Notes:**\n- Adding `ui-tree` to your root element of the tree.\n- Adding `ui-tree-nodes` to the elements which contain the nodes. `ng-model` is required, and it should be an array, so that the directive knows which model to bind and update.\n- Adding `ui-tree-node` to your node element, it always follows the `ng-repeat` attribute.\n- Adding `ui-tree-handle` to the element used to drag the object.\n- All `ui-tree`, `ui-tree-nodes`, `ng-model`, `ui-tree-node` are necessary. And they can be nested.\n- If you don't add a `ui-tree-handle` for a node, the entire node can be dragged.\n\n**Styling Notes:**\n- While an element is being dragged, it is temporarily removed from the DOM and injected just before closing `</body>` tag. When dropped, it returns to it's original place in the DOM's hierarchy.\n- The dragged element `ui-tree-node`, together with its parent `ui-tree-nodes`, are the only ones being injected. hence any styling that relies on a 'higher' parent, will not apply.\n- To target the dragged element use the class `angular-ui-tree-drag`, which is added to the `ui-tree-nodes` element.\n- While a node is being dragged, a new empty node is added into the tree to act as a placeholder. this node will have the class 'angular-ui-tree-placeholder'.\n\n#### Unlimited nesting HTML View or Templates Example\n\n```html\n<!-- Nested node template -->\n<script type=\"text/ng-template\" id=\"nodes_renderer.html\">\n  <div ui-tree-handle>\n    {{node.title}}\n  </div>\n  <ol ui-tree-nodes=\"\" ng-model=\"node.nodes\">\n    <li ng-repeat=\"node in node.nodes\" ui-tree-node ng-include=\"'nodes_renderer.html'\">\n    </li>\n  </ol>\n</script>\n<div ui-tree>\n  <ol ui-tree-nodes=\"\" ng-model=\"data\" id=\"tree-root\">\n    <li ng-repeat=\"node in data\" ui-tree-node ng-include=\"'nodes_renderer.html'\"></li>\n  </ol>\n</div>\n```\n\n## Structure of angular-ui-tree\n\n    ui-tree                             --> Root of tree\n      ui-tree-nodes                     --> Container of nodes\n        ui-tree-node                    --> One of the node of a tree\n          ui-tree-handle                --> Handle\n          ui-tree-nodes                 --> Container of child-nodes\n            ui-tree-node                --> Child node\n              ui-tree-handle            --> Handle\n            ui-tree-node                --> Child node\n        ui-tree-node                    --> Another node\n          ui-tree-handle                --> Handle\n\n## Migrate From v1.x to v2.0\n[Migrate From v1.x to v2.0](https://github.com/angular-ui-tree/angular-ui-tree/wiki/Migrate-From-v1.x-to-v2.0)\n\n## API\n\n### ui-tree\n`ui-tree` is the root scope for a tree\n\n#### Attributes\n##### data-nodrop-enabled\nPrevent dropping of nodes into this tree. This applies to both nodes dragged within this tree and nodes from a connected tree. \nAdding this attribute to the `ui-tree` effectively makes the tree a drag source only. \nTo prevent a particular node from accepting children, add the attribute to the `ui-tree-nodes` element instead (see below).\nSee the [demo page](http://angular-ui-tree.github.io/angular-ui-tree/#/nodrop) for examples.\n- `false` (default): turn off\n- `true`: turn on no drop\n\n##### data-clone-enabled\nTurn on cloning of nodes. This will clone the source node to the destination when dragging between 2 trees.\n- `false` (default): turn off clone\n- `true`: turn on clone\n\n##### data-drag-enabled\nTurn on dragging and dropping of nodes.\n- `true` (default): allow drag and drop\n- `false`: turn off drag and drop\n\n##### data-max-depth\nNumber of levels a nodes can be nested (default 0). 0 means no limit.\n**Note**\nIf you write your own [$callbacks.accept](#accept) method, you have to check `data-max-depth` by yourself.\n\n##### data-drag-delay\nNumber of milliseconds a click must be held to start a drag. (default 0)\n\n##### data-empty-placeholder-enabled\nIf a tree is empty, there will be an empty placeholder which is used to drop node from other trees by default.\n- `true` (default): display an empty placeholder if the tree is empty\n- `false`: do not display an empty placeholder\n\n##### Example\n- turn on/off drag and drop.\n- Limit depth to 5\n- 500 milliseconds delay\n```html\n<div ui-tree data-drag-enabled=\"tree.enabled\" data-max-depth=\"5\" data-drag-delay=\"500\">\n\n</div>\n```\n\n#### Methods of scope\n##### collapseAll()\nCollapse all it's child nodes.\n\n##### expandAll()\nExpand all it's child nodes.\n\n##### $callbacks (type: Object)\n`$callbacks` is a very important property for `angular-ui-tree`. \nWhen some special events trigger, the functions in `$callbacks` are called. \nThe callbacks can be passed through the directive.\n\nExample:\n```js\nmyAppModule.controller('MyController', function($scope) {\n  $scope.treeOptions = {\n    accept: function(sourceNodeScope, destNodesScope, destIndex) {\n      return true;\n    },\n  };\n});\n```\n```html\n<div ui-tree=\"treeOptions\">\n  <ol ui-tree-nodes ng-model=\"nodes\">\n    <li ng-repeat=\"node in nodes\" ui-tree-node>{{node.title}}</li>\n  </ol>\n</div>\n```\n\n#### Methods in $callbacks\n##### <a name=\"accept\"></a>accept(sourceNodeScope, destNodesScope, destIndex)\nCheck if the current dragging node can be dropped in the `ui-tree-nodes`.\n\n**Parameters:**\n- `sourceNodeScope`: The scope of source node which is dragging.\n- `destNodesScope`: The scope of `ui-tree-nodes` which you want to drop in.\n- `destIndex`: The position you want to drop in.\n\n**Return**\nIf the nodes accept the current dragging node.\n- `true` Allow it to drop.\n- `false` Not allow.\n\n##### <a name=\"beforeDrag\"></a>beforeDrag(sourceNodeScope)\nCheck if the current selected node can be dragged.\n\n**Parameters:**\n- `sourceNodeScope`: The scope of source node which is selected.\n\n**Return**\nIf current node is draggable.\n- `true` Allow it to drag.\n- `false` Not allow.\n\n##### <a name=\"removed\"></a>removed(node)\nIf a node is removed, the `removed` callback will be called.\n\n**Parameters:**\n - `node`: The node that was removed\n\n##### <a name=\"dropped\"></a>dropped(event)\nIf a node moves it's position after dropped, the `nodeDropped` callback will be called.\n\n**Parameters:**\n- <a name=\"eventParam\"></a>`event`: Event arguments, it's an object.\n  * `source`: Source object\n    + `nodeScope`: The scope of source node which was dragged.\n    + `nodesScope`: The scope of the parent nodes of source node  when it began to drag.\n    + `index`: The position when it began to drag.\n    + `cloneModel`: Given data-clone-enabled is true, holds the model of the cloned node that is to be inserted, this can be edited before drop without affecting the source node.   \n  * `dest`: Destination object\n    + `nodesScope`: The scope of `ui-tree-nodes` which you just dropped in.\n    + `index`: The position you dropped in.\n  * `elements`: The dragging relative elements.\n    + `placeholder`: The placeholder element.\n    + `dragging`: The dragging element.\n  * `pos`: Position object.\n\nTo change the node being dropped before \n##### <a name=\"dragStart\"></a>dragStart(event)\nThe `dragStart` function is called when the user starts to drag the node.\n**Parameters:**\nSame as [Parameters](#eventParam) of dropped.\n\n##### dragMove(event)\nThe `dragMove` function is called when the user moves the node.\n\n**Parameters:**\nSame as [Parameters](#eventParam) of dropped.\n\n##### dragStop(event)\nThe `dragStop` function is called when the user stop dragging the node.\n\n**Parameters:**\nSame as [Parameters](#eventParam) of dropped.\n\n##### beforeDrop(event)\nThe `beforeDrop` function is called before the dragging node is dropped. If you implement this callback, the return value determines whether the drop event is allowed to proceed.\n\n**Parameters:**\nSame as [Parameters](#eventParam) of dropped.\n\n**Callback Return Values**\n\n- **Resolved Promise** or **truthy**: Allow the node to be dropped\n\n- **Rejected Promise** or **false**: Disallow the node drop and return the dragged node to its original position\n\n### ui-tree-nodes\n`ui-tree-nodes` is the container of nodes. \nEvery `ui-tree-node` should have a `ui-tree-nodes` as it's container, a `ui-tree-nodes` can have multiple child nodes.\n\n#### Attributes\n##### data-nodrop-enabled <a name=\"nodes_attrs_nodrop\"></a>\nPrevent nodes from being dropped into this node container. \nThis prevents nodes from being dropped directly into the container with the attribute but not into children that contain additional containers.\nSee the [demo page](http://angular-ui-tree.github.io/angular-ui-tree/#/nodrop) for examples.\n\n##### data-max-depth <a name=\"nodes_attrs_maxDepth\"></a>\nNumber of levels a nodes can be nested (default 0). 0 means no limit. It can override the `data-max-depth` in `ui-tree`.\n**Note**\nIf you write your own [$callbacks.accept](#accept) method, you have to check `data-nodrop-enabled` and `data-max-depth` by yourself.\n\nExample: turn off drop.\n```html\n<ol ui-tree-nodes ng-model=\"nodes\" data-nodrop-enabled=\"true\">\n  <li ng-repeat=\"node in nodes\" ui-tree-node>{{node.title}}</li>\n</ol>\n```\n\n#### Properties of scope\n##### $element (type: AngularElement)\nThe html element which bind with the `ui-tree-nodes` scope.\n\n##### $modelValue (type: Object)\nThe data which bind with the scope.\n\n##### $nodes (type: Array)\nAll it's child nodes. The type of child node is scope of `ui-tree-node`.\n\n##### $nodeScope (type: Scope of ui-tree-node)\nThe scope of node which current `ui-tree-nodes` belongs to.\nFor example:\n\n    ui-tree-nodes                       --> nodes 1\n      ui-tree-node                      --> node 1.1\n        ui-tree-nodes                   --> nodes 1.1\n          ui-tree-node                  --> node 1.1.1\n          ui-tree-node                  --> node 1.1.2\n      ui-tree-node                      --> node 1.2\n\nThe property `$nodeScope of` `nodes 1.1` is `node 1.1`. The property `$nodes` of `nodes 1.1` is [`node 1.1.1`, `node 1.1.2`]\n\n##### maxDepth\nNumber of levels a node can be nested. It bases on the attribute [data-max-depth](#nodes_attrs_maxDepth).\n\n##### nodropEnabled\nTurn off drop on nodes. It bases on the attribute [data-nodrop-enabled](#nodes_attrs_nodrop).\n\n#### Methods of scope\n##### depth()\nGet the depth.\n\n##### outOfDepth(sourceNode)\nCheck if depth limit has reached\n\n##### isParent(nodeScope)\nCheck if the nodes is the parent of the target node.\n**Parameters:**\n- `nodeScope`: The target node which is used to check with the current nodes.\n\n\n### ui-tree-node\nA node of a tree. Every `ui-tree-node` should have a `ui-tree-nodes` as it's container.\n\n#### Attributes\n##### data-nodrag\nTurn off drag of node.\nExample: turn off drag.\n```html\n<ol ui-tree-nodes ng-model=\"nodes\">\n  <li ng-repeat=\"node in nodes\" ui-tree-node data-nodrag>{{node.title}}</li>\n</ol>\n```\n\n##### data-collapsed\nCollapse the node.\n\n#### Properties of scope\n##### $element (type: AngularElement)\nThe html element which bind with the `ui-tree-nodes` scope.\n\n##### $modelValue (type: Object)\nThe data which bind with the scope.\n\n##### collapsed (type: Bool)\nIf the node is collapsed\n\n- `true`: Current node is collapsed;\n- `false`: Current node is expanded.\n\n##### $parentNodeScope (type: Scope of ui-tree-node)\nThe scope of parent node.\n\n##### $childNodesScope (type: Scope of ui-tree-nodes)\nThe scope of it's `ui-tree-nodes`.\n\n##### $parentNodesScope (type: Scope of ui-tree-nodes)\nThe scope of it's parent `ui-tree-nodes`.\n\nFor example:\n\n    ui-tree-nodes                       --> nodes 1\n      ui-tree-node                      --> node 1.1\n        ui-tree-nodes                   --> nodes 1.1\n          ui-tree-node                  --> node 1.1.1\n          ui-tree-node                  --> node 1.1.2\n      ui-tree-node                      --> node 1.2\n\n- `node 1.1.1`.`$parentNodeScope` is `node 1.1`.\n- `node 1.1`.`$childNodesScope` is `nodes 1.1`.\n- `node 1.1`.`$parentNodesScope` is `nodes 1`.\n\n#### Methods of scope\n##### collapse()\nCollapse current node.\n\n##### expand()\nExpand current node.\n\n##### toggle()\nToggle current node.\n\n##### remove()\nRemove current node.\n\n##### depth()\nGet the depth of the node.\n\n##### maxSubDepth()\nGet the max depth of all the child nodes. If there is no child nodes, return 0.\n\n##### isSibling(targetNodeScope)\nCheck if the current node is sibling with the target node.\n**Parameters:**\n- `targetNodeScope`: The target node which is used to check with the current node.\n\n##### isChild(targetNodeScope)\nCheck if the current node is a child of the target node.\n**Parameters:**\n- `targetNodeScope`: The target node which is used to check with the current node.\n\n\n### ui-tree-handle\nUse the `ui-tree-handle` to specify an element used to drag the object. \nIf you don't add a `ui-tree-handle` for a node, the entire node can be dragged.\n\n## Runtime Configuration\nUse the `treeConfig` service to configure the tree defaults at runtime.\nWith this you can customize the classes applied to various tree elements\n(`treeClass`, `emptyTreeClass`, `hiddenClass`, `nodesClass`, `handleClass`,\n`placeholderClass`, `dragClass`).\n\nIn addition, you can modify whether nodes are collapsed by default\n(`defaultCollapsed`: default false). For example:\n\n```js\nmodule.config(function(treeConfig) {\n  treeConfig.defaultCollapsed = true; // collapse nodes by default\n});\n```\n\n## NgModules Link\n\n[Give us a like on ngmodules](http://ngmodules.org/modules/angular-ui-tree)\n\n## Development environment setup\n#### Prerequisites\n\n* [Node Package Manager](https://npmjs.org/) (NPM)\n* [Git](http://git-scm.com/)\n\n#### Dependencies\n\n* [Gulp](http://gulpjs.com/) (task automation)\n* [Bower](http://bower.io/) (package management)\n\n#### Installation\nRun the commands below in the project root directory.\n\n#####1. Install Gulp and Bower\n\n    $ sudo npm install -g gulp bower\n\n#####2. Install project dependencies\n\n    $ npm install\n    $ sudo ./node_modules/protractor/bin/webdriver-manager update\n    $ bower install\n\n## Useful commands\n\n####Running a Local Development Web Server\nTo debug code and run end-to-end tests, it is often useful to have a local HTTP server. \nFor this purpose, we have made available a local web server based on Node.js.\n\nTo start the web server, run:\n\n    $ gulp serve\n\nTo access the local server, enter the following URL into your web browser:\n\n    http://localhost:9000\n\nBy default, it serves the contents of the `examples` directory.\n\n\n####Building angular-ui-tree\nTo build angular-ui-tree, you use the following command.\n\n    $ gulp build\n\nThis will generate non-minified and minified JavaScript files in the `dist` directory.\n\n####Run tests\nYou can run the unit test using a separate task.\n\n    $ gulp test\n    \nThe E2E-tests can be executed using\n    \n    $ gulp test:e2e\n    \n    > Note: make sure you have the example website running on port `9000` (using the `$ gulp serve` command)\n\t\n*Windows: If your e2e tests are failing, run the command prompt as an administrator. ([See symlink issue](https://github.com/ben-eb/gulp-symlink/issues/33))*\n\n####Deploy examples\n\n    $ gulp deploy\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/angular-ui-tree/angular-ui-tree.git"
  },
  "scripts": {
    "codacy": "cat ./coverage/lcov/lcov.info | codacy-coverage --verbose",
    "coveralls": "cat ./coverage/lcov/lcov.info | coveralls",
    "test": "gulp build && gulp test:e2e"
  },
  "version": "2.13.0"
}
